---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/expression/fstring.py
---
## Input
```py
(
    f'{one}'
    f'{two}'
)

# quote handling for raw f-strings
rf"Not-so-tricky \"quote"

# Regression test for fstrings dropping comments
result_f = (
    'Traceback (most recent call last):\n'
    f'  File "{__file__}", line {lineno_f+5}, in _check_recursive_traceback_display\n'
    '    f()\n'
    f'  File "{__file__}", line {lineno_f+1}, in f\n'
    '    f()\n'
    f'  File "{__file__}", line {lineno_f+1}, in f\n'
    '    f()\n'
    f'  File "{__file__}", line {lineno_f+1}, in f\n'
    '    f()\n'
    # XXX: The following line changes depending on whether the tests
    # are run through the interactive interpreter or with -m
    # It also varies depending on the platform (stack size)
    # Fortunately, we don't care about exactness here, so we use regex
    r'  \[Previous line repeated (\d+) more times\]' '\n'
    'RecursionError: maximum recursion depth exceeded\n'
)


# Regression for fstring dropping comments that were accidentally attached to
# an expression inside a formatted value
(
    f'{1}'
    # comment
    ''
)


f"{ chr(65)  =   }"
f"{ chr(65)  =   !s}"
f"{ chr(65)  =   !r}"
f"{ chr(65)  =   :#x}"
f"{a=!r:0.05f}"

f"{ {}  =   }"
f"{ {}=}"

# should add some nice spaces
f"{1-2+3}"


# don't switch quotes inside a formatted value
f"\"{f'{nested} inner'}\" outer"

# need a space to avoid escaping the curly
f"{ {1}}"

# extra spaces don't interfere with debug_text
f"{ {1}=}"

# handle string continuations
(
    ''
    f'"{1}'
)

# it's ok to change triple quotes with even with qoutes inside f-strings
f''' {""} '''

# it's ok to change the inner single to a double quote
f""" {f' {1}'} """
f''' {f' {1}'} '''

# TODO: would we want to swap the quotes to use double on the outside?
f' {f" {1}"} '
f''' {f""" {1}"""} '''

# various nested quotes to leave unchanged
f" {f' {1}'} "
f""" {f" {1}"} """
f""" {f''' {1}'''} """
f"{f'''{'nested'} inner'''} outer"


# must not break lines inside non-triple quoted f-strings
print(
    f"Finished {f'{1}'} updating analytics counts through {fill_to_time} in {time.time() - start:.3f}s"

)
# TODO: ok to ot break lines inside triple quoted f-strings
print(
    f"Finished {f'{1}'} updating analytics counts through {fill_to_time} in {time.time() - start:.3f}s"

)
```

## Output
```py
(f"{one}" f"{two}")

# quote handling for raw f-strings
rf"Not-so-tricky \"quote"

# Regression test for fstrings dropping comments
result_f = (
    "Traceback (most recent call last):\n"
    f'  File "{__file__}", line {lineno_f + 5}, in _check_recursive_traceback_display\n'
    "    f()\n"
    f'  File "{__file__}", line {lineno_f + 1}, in f\n'
    "    f()\n"
    f'  File "{__file__}", line {lineno_f + 1}, in f\n'
    "    f()\n"
    f'  File "{__file__}", line {lineno_f + 1}, in f\n'
    "    f()\n"
    # XXX: The following line changes depending on whether the tests
    # are run through the interactive interpreter or with -m
    # It also varies depending on the platform (stack size)
    # Fortunately, we don't care about exactness here, so we use regex
    r"  \[Previous line repeated (\d+) more times\]"
    "\n"
    "RecursionError: maximum recursion depth exceeded\n"
)


# Regression for fstring dropping comments that were accidentally attached to
# an expression inside a formatted value
(
    f"{1}"
    # comment
    ""
)


f"{ chr(65)  =   }"
f"{ chr(65)  =   !s}"
f"{ chr(65)  =   !r}"
f"{ chr(65)  =   :#x}"
f"{a=!r:0.05f}"

f"{ {}  =   }"
f"{ {}=}"

# should add some nice spaces
f"{1 - 2 + 3}"


# don't switch quotes inside a formatted value
f"\"{f'{nested} inner'}\" outer"

# need a space to avoid escaping the curly
f"{ {1} }"

# extra spaces don't interfere with debug_text
f"{ {1}=}"

# handle string continuations
("" f'"{1}')

# it's ok to change triple quotes with even with qoutes inside f-strings
f""" {""} """

# it's ok to change the inner single to a double quote
f""" {f" {1}"} """
f""" {f" {1}"} """

# TODO: would we want to swap the quotes to use double on the outside?
f' {f" {1}"} '
f''' {f""" {1}"""} '''

# various nested quotes to leave unchanged
f" {f' {1}'} "
f""" {f" {1}"} """
f""" {f''' {1}'''} """
f"{f'''{'nested'} inner'''} outer"


# must not break lines inside non-triple quoted f-strings
print(
    f"Finished {f'{1}'} updating analytics counts through {fill_to_time} in {time.time() - start:.3f}s"
)
# TODO: ok to ot break lines inside triple quoted f-strings
print(
    f"Finished {f'{1}'} updating analytics counts through {fill_to_time} in {time.time() - start:.3f}s"
)
```



